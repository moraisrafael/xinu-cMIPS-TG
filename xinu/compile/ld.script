OUTPUT_ARCH(mips)
ENTRY(_start)

MEMORY
{
        rom (rx)  : ORIGIN = 0x00000000, /* x_INST_BASE_ADDR */
                    LENGTH = 0x00020000, /* x_INST_MEM_SZ */
        ram (!rx) : ORIGIN = 0x00080000, /* x_DATA_BASE_ADDR */
                    LENGTH = 0x00080000, /* x_DATA_MEM_SZ */
        io (!rx)  : ORIGIN = 0x0f000000, /* not used, do not remove       */
                    LENGTH = 0x00020000  /* edMemory.sh needs thess lines */
}

SECTIONS
{
       .text :
       {
          *(.text .text.*)
          _etext = . ;         /* end of text constant */

       }                                     > rom

       /* .excp : { *(.excp) }                  > ram */

	base_RAM = 0x00080000; /* x_DATA_BASE_ADDR */
	base_data = base_RAM; /*  + 0x0200; */

       .data base_data : 
       {
          *(.data .data.*) 
       }                                     > ram
       .data1   : { *(.data1) }              > ram
       .rodata  : { *(.rodata .rodata.*) }   > ram
       .rodata1 : { *(.rodata1) }            > ram
       .sdata   : { *(.sdata .sdata.*) }     > ram
       .sbss    : { *(.sbss .sbss.*) *(.scommon .scommon.*) } > ram
       .lit8    : { *(.lit8) }               > ram
       .lit4    : { *(.lit4) }               > ram

       .bss     :
       {
          _edata = . ;         /* end of data constant */
          _bss = . ;           /* beginning of bss segment */
          *(.bss .bss.*) *(COMMON) 
          _end = . ;           /* end of image constant */
       }                                     > ram

       start_RAM = base_RAM;
       end_RAM = 0x00080000; /* x_DATA_MEM_SZ */
       half_RAM = (end_RAM >> 1);
       base_PT = ( start_RAM + half_RAM );
       .PT base_PT : { *(.PT) }            > ram

}
